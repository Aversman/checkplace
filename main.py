# -*- coding: utf-8 -*-

from os import replace
import config
import interface

import logging
import re


from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text

logging.basicConfig(level=logging.INFO)

bot = Bot(token = config.API_TOKEN)
dp = Dispatcher(bot)

# for redirecting user to add self place
CHECKPLACE_LINK = "https://checkplace.net/"

# Place to read images
IMAGE_DIRECTORY = "/var/www/www-root/data/www/checkplace.net/gallery/"

# auth process of user
@dp.message_handler(commands=['start'])
async def registration_process(message: types.Message):
    is_register = config.UserDatabaseConfig(message.from_user.id, '', 0).is_registered()
    if not is_register:
        markup = types.ReplyKeyboardRemove(selective=False)
        await message.answer("–ü—Ä–∏–≤–µ—Ç, {}! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥:".format(message.from_user.first_name), reply_markup=markup)
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, {}!".format(message.from_user.first_name), reply_markup=interface.main_menu())



# check for auth user
@dp.message_handler(regexp=r"(\d\d.\d\d.\d\d\d\d)")
async def check_date_of_birth(message: types.Message):
    date = str(re.search(r'(\d\d.\d\d.\d\d\d\d)', str(message.text)).group(0))
    is_register = config.UserDatabaseConfig(message.from_user.id, message.from_user.first_name, 0).is_registered()
    if not is_register:
        reg_user = config.UserDatabaseConfig(message.from_user.id, message.from_user.first_name, date).user_register()
        if reg_user:
            await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å üòÅ", reply_markup=interface.main_menu())
        else:
            await message.answer("–£ –Ω–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–æ–µ-–∫–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!")
    else:
        await message.answer("–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è? üòä", reply_markup=interface.main_menu())



@dp.message_handler(regexp=r"(‚≠êÔ∏è\s–î–æ–±–∞–≤–∏—Ç—å\s–º–µ—Å—Ç–æ)")
async def show_info_by_adding_place(message: types.Message):
    is_register = config.UserDatabaseConfig(message.from_user.id, '', 0).is_registered()
    if not is_register:
        markup = types.ReplyKeyboardRemove(selective=False)
        await message.answer("–ü—Ä–∏–≤–µ—Ç, {}! –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üòî –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥-–º–º-–≥–≥–≥–≥:".format(message.from_user.first_name), reply_markup=markup)
    else:
        hours_passed = config.UserDatabaseConfig(int(message.from_user.id), '', 0).check_hours()
        message_info = """–£—á–∞–≤—Å—Ç–≤—É–π—Ç–µ –≤ –Ω–∞—à–µ–º —Ä–∞–∑–≤–∏—Ç–∏–µ, –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞ —Å CheckPlace!\n\n–ü—Ä–∏–≤–µ—Ç, –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ üòä –ï—Å–ª–∏ —Ç—ã –∑–Ω–∞–µ—à—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Å—Ç–æ, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å –Ω–∞–º–∏, —Ç–æ –º—ã –±—É–¥–µ–º –æ—á–µ–Ω—å —Ä–∞–¥—ã —É–∑–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º.\n\n–ü—Ä–∞–≤–∏–ª–∞ —Ç–∞–∫–∏–µ:\n1. –¢—ã –º–æ–∂–µ—à—å –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–º —Å–≤–æ–µ –º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Å—É—Ç–∫–∏.\n2. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Å–ª–∞—Ç—å –Ω–∞–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –º–µ—Å—Ç–∞, —Ç—ã –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É.\n3. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ç–≤–æ–µ –º–µ—Å—Ç–æ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π, —Ç—ã —Å–º–æ–∂–µ—à—å —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ –≤ —Ä–∞–∑–¥–µ–ª–µ \"‚ù§Ô∏è –ú–æ–∏ –º–µ—Å—Ç–∞\" –∏ —Ç–∞–∫–∂–µ –Ω–∞–π—Ç–∏ —ç—Ç–æ –º–µ—Å—Ç–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ.\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —É—á–∞–≤—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ CheckPlace! ü§©"""
        if hours_passed >= 24:
            await message.answer(message_info, reply_markup=interface.generate_our_website(CHECKPLACE_LINK + f"?id={message.from_user.id}"))
        else:
            await message.answer(message_info)
            await message.answer(f"–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {24 - hours_passed} —á–∞—Å/–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ.")



@dp.message_handler(regexp=r"(‚ù§Ô∏è\s–ú–æ–∏\s–º–µ—Å—Ç–∞)")
async def show_global_places(message: types.Message):
    is_register = config.UserDatabaseConfig(message.from_user.id, '', 0).is_registered()
    if not is_register:
        markup = types.ReplyKeyboardRemove(selective=False)
        await message.answer("–ü—Ä–∏–≤–µ—Ç, {}! –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üòî –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥-–º–º-–≥–≥–≥–≥:".format(message.from_user.first_name), reply_markup=markup)
    else:
        data = config.UserPlaces(int(message.from_user.id)).show_user_places()
        if not data:
            await message.answer("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –º–µ—Å—Ç –ø—É—Å—Ç.")
        else:
            await message.answer("–í–∞—à–∏ –º–µ—Å—Ç–∞:")
            output_text = ""
            status = ['üïì –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è', '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ']
            for i in range(len(data)):
                if int(data[i][1]) != 0:
                    output_text += f"{i + 1}. {status[1]} | {data[i][0]}\n\n"
                else:
                    output_text += f"{i + 1}. {status[0]} | {data[i][0]}\n\n"
            await message.answer(output_text)




@dp.message_handler(regexp=r"(üåö\s–í—ã–±—Ä–∞—Ç—å\s–º–µ—Å—Ç–æ)")
async def show_global_places(message: types.Message):
    categories = config.Checkplace().show_categories()
    if not categories:
        await message.answer('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=interface.show_categories(categories))
    


@dp.message_handler(regexp=r"(üåö\s\d+.\s\w+)")
async def open_places_list(message: types.Message):
    
    category_id = int(re.search(r'\d+', str(message.text)).group(0))
    preview_list = config.Checkplace().show_posts_preview_list(category_id)
    output = ""
    if not preview_list:
        await message.answer('–ú–µ—Å—Ç–∞ –ø–æ–¥ –¥–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.', reply_markup=interface.main_menu())
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ:", reply_markup=interface.main_menu())
        for i in range(len(preview_list)):
            output += "{}. {}\n".format((i + 1), preview_list[i][1])
        
        await message.answer(output, reply_markup=interface.show_places_list_keyboard(preview_list))



@dp.callback_query_handler(Text(startswith="post_id_"))
async def callbacks_post_list(call: types.CallbackQuery):
    action = call.data.split("_")[2]
    if action == 'cancel':
        await call.message.delete_reply_markup()
        await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    else:
        output_text = ""
        post_data = config.Checkplace().show_post(int(action))
        if post_data:
            output_text = f"*–ù–∞–∑–≤–∞–Ω–∏–µ:* {post_data[0][1]}\n*–û–ø–∏—Å–∞–Ω–∏–µ:* {post_data[0][2]}\n*–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* {post_data[0][3]}\n*–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:* {post_data[0][4]}\n*–û—Ä–∏–µ–Ω—Ç–∏—Ä—ã:* {post_data[0][5]}\n"
        else:
            output_text = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        try:
            img = open(f"{IMAGE_DIRECTORY}{post_data[0][6]}", "rb")
            print(img)
        except:
            await call.message.answer(output_text, parse_mode='Markdown', reply_markup=interface.generate_link_markup(post_data[0][7]))
        else:
            await bot.send_photo(chat_id=call.from_user.id, photo=img, caption=output_text, parse_mode='Markdown', reply_markup=interface.generate_link_markup(post_data[0][7]))
            img.close()
    
    await call.answer()



@dp.message_handler(regexp=r"(üßë‚Äçüíª\s–ü–æ–¥–¥–µ—Ä–∂–∫–∞)")
async def support(message: types.Message):
    await message.answer("–ü–∏—à–∏—Ç–µ –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –Ω–∞–º:\n@Neputat_sosnovoy –∏–ª–∏ @Misterioy.", reply_markup=interface.main_menu())



@dp.message_handler(regexp=r"(‚¨ÖÔ∏è\s–ù–∞–∑–∞–¥)")
async def cancellation(message: types.Message):
    await message.answer('–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è? üòä', reply_markup=interface.main_menu())



@dp.message_handler()
async def getinfo(message: types.Message):
    is_register = config.UserDatabaseConfig(message.from_user.id, '', 0).is_registered()
    if not is_register:
        markup = types.ReplyKeyboardRemove(selective=False)
        await message.answer("–ü—Ä–∏–≤–µ—Ç, {}! –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã üòî –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥-–º–º-–≥–≥–≥–≥:".format(message.from_user.first_name), reply_markup=markup)
    else:
        await message.answer("–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è? üòä", reply_markup=interface.main_menu())


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)